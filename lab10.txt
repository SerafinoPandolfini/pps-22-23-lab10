
succ(N, s(N)).

sum(zero, N, N).
sum(s(M), N, s(O)) :- sum(M, N, O).

mul(zero, N, zero).
mul(s(M), N, O2) :- mul(M, N, O), sum(O, N, O2).

dec(s(N), N).

factorial(zero, s(zero)).
factorial(s(N), O2) :- factorial(N, O), mul(O, s(N), O2).

greater(s(_), zero). 
greater(s(M), s(N)) :- greater(M, N).


find(cons(E, _), E).
find(cons(_, X), Y) :- find(X, Y).

position(cons(E, _), zero, E).
position(cons(_, T), s(N), E) :- position(T, N, E).

concat(nil, L, L).
concat(cons(H, T), L, cons(H, O)) :- concat(T, L, O).

search (X , cons (X , _)).
search (X , cons (_ , Xs )) :- search (X , Xs ).


%Part 1: Queries on list

search2 (X , cons (X , cons (X , _)) ).
search2 (X , cons (_ , Xs ) ) :- search2 (X , Xs ).


% search_two (Elem , List )
% looks for two occurrences of Elem with any element in between !

search_two(X, cons(X,cons(_,cons(X,_)))).
search_two (X , cons (_ , Xs ) ) :- search_two (X , Xs ).


% search_anytwo (Elem , List )
% looks for any Elem that occurs two times , anywhere

search_anytwo(X, cons(X, T)) :- search(X, T).
search_anytwo(X, cons(_,Xs)) :- search_anytwo(X, Xs).


%Part 2: Extracting information from a list

% size (List , Size )
% Size will contain the number of elements in List , 
%written using notation zero , s( zero ), s(s( zero )).

size(nil, zero).
size(cons(_,Xs), s(N)) :- size(Xs, N).


sum_list(nil,zero).
sum_list(cons(H,T),O2):- sum_list(T,O), sum(O,H,O2).


% count (List , Element , NOccurrences )
% it uses count (List , Element , NOccurrencesSoFar , NOccurrences )

count(L , E , N ) :- count( L , E , zero , N).
count(nil , E , N , N).
count(cons(E , L) , E , N , M) :- count(L , E , s(N) , M).
count(cons(E , L) , E2 , N , M) :- E \= E2 , count(L , E2 , N , M).


% max(List , Max )
% Max is the biggest element in List
% Suppose the list has at least one element

max(cons(E, L), M) :- max(L, E, M).
max(nil, M, M).
max(cons(E, L), T, M) :- max(L, E, M), greater(E, T).
max(cons(E, L), T, M) :- max(L, T, M), greater(T, E).
max(cons(E, L), T, M) :- max(L, E, M), T = E.


% min-max (List ,Min , Max )
% Min is the smallest element in List
% Max is the biggest element in List
% Suppose the list has at least one element

min_max(cons(E, L), Min, Max) :- min_max(L, E, E, Min, Max).
min_max(nil, Min, Max, Min, Max).
min_max(cons(E, L), Tmin, Tmax, Min, Max) :- min_max(L, Tmin, E, Min, Max), greater(E, Tmax).
min_max(cons(E, L), Tmin, Tmax, Min, Max) :- min_max(L, E, Tmax, Min, Max), greater(Tmin, E).
min_max(cons(E, L), Tmin, Tmax, Min, Max) :- min_max(L, Tmin, Tmax, Min, Max), greater(Tmax, E), greater(E, Tmin).
min_max(cons(E, L), Tmin, Tmax, Min, Max) :- min_max(L, Tmin, Tmax, Min, Max), Tmin = E, Tmax \= E.
min_max(cons(E, L), Tmin, Tmax, Min, Max) :- min_max(L, Tmin, Tmax, Min, Max), Tmax = E.


%Part 3: Compare lists

% same (List1 , List2 )
% are the two lists exactly the same ?

same(nil, nil).
same(cons(E1, L1), cons(E2, L2)) :- same(L1, L2), E1 = E2.


% all_bigger (List1 , List2 )
% all elements in List1 are bigger than those in List2 , 1 by 1

all_bigger(nil, nil).
all_bigger(cons(E1, L1), cons(E2, L2)) :- all_bigger(L1, L2), greater(E1, E2).


% sublist (List1 , List2 )
% List1 should contain elements all also in List2

sublist(nil, cons(_, _)).
sublist(cons(E1, L1), L2) :- sublist(L1, L2), search(E1, L2).


%Part 4: Creating lists

% seq(N,E, List ) --> List is [E,E ,... ,E] with size N
% example : seq (s(s(s( zero ))), a, cons (a, cons (a, cons (a,nil )))).

seq(zero , _ , nil ).
seq(s(N) , E , cons(E ,T )) :- seq(N , E , T).


% seqR (N, List )

seqR(zero, nil).
seqR(s(N), cons(E, L)) :- seqR(N, L), N = E.


% seqR2 (N, List ) --> is [0 ,1 ,... ,N -1]

seqR2(N, L) :- seqR2(N, L, zero).
seqR2(zero, nil, _).
seqR2(s(N), cons(E, L), E) :- seqR2(N, L, s(E)).


%Part 5: Port list functions

%last(List, Last)
%Last is the last element of the list
%example last(cons(s(zero), cons(zero, cons(s(s(zero)), nil))), s(s(zero)))

last(cons(E, nil), E).
last(cons(_, L), E) :- last(L, E).


% map_inc (List1, List2)
%all element in List2 are the same of List1 + 1
%example map_inc(cons(s(zero), cons(zero, nil)), cons(s(s(zero)), cons(s(zero), nil)))

map_inc(nil, nil).
map_inc(cons(E, L1), cons(s(E), L2)) :- map_inc(L1, L2).


%filter_positive(List1, List2)
%List2 is the same as List1 without zero element
%example filter_positive(cons(s(zero), cons(zero, cons(s(s(zero)), nil))), cons(s(zero), cons(s(s(zero)), nil)))

filter_positive(nil, nil).
filter_positive(cons(E, L1), cons(E, L2)) :- filter_positive(L1, L2), greater(E, zero).
filter_positive(cons(E, L1), L2) :- filter_positive(L1, L2), E = zero. 


%count_positive(List, N)
%N is the number of positive (non zero) element in List
%example count_positive(cons(s(zero), cons(zero, cons(s(s(zero)), nil))),  s(s(zero)))

count_positive(L, N) :- count_positive(L, zero, N).
count_positive(nil, N, N).
count_positive(cons(E, L), M, N) :- greater(E, zero), count_positive(L, s(M), N).
count_positive(cons(E, L), M, N) :- E = zero, count_positive(L, M, N).


%drop_right(List1, List2, N)
%List2 is List1 without the last N element.
%example drop_right(cons(s(zero), cons(zero, cons(s(s(zero)), nil))), cons(s(zero), nil), s(s(zero)))

drop_right(nil, nil, zero).
drop_right(cons(E, L), nil, s(N)) :- drop_right(L, nil, N).
drop_right(cons(E, L1), cons(E, L2), N) :- drop_right(L1, L2, N).


%reversed(List1, List2)
%List2 is List1 reversed.
%example reversed(cons(s(zero), cons(zero, cons(s(s(zero)), nil))), cons(s(s(zero)), cons(zero, cons((s(zero), nil))))

reversed(nil, nil).
reversed(cons(E1, L1), L2) :- last(L2, E3), E1 = E3, drop_right(L2, L3, s(zero)), reversed(L1, L3).


